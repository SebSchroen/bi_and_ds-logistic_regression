library(shiny)
library(ggplot2)
library(purrr)
library(tidyverse)
library(tidymodels)
# Load training data and logistic regression model
data <- read_csv("rawdata/songs_with_features.csv") %>% 
  filter(category %in% c("Klassik", "Dance/Electronic")) %>% 
  select(track.name, track.artist, category, energy, danceability) %>% 
  mutate(category = case_when(
    category == "Klassik" ~ "Klassik",
    category == "Dance/Electronic" ~ "EDM"
  ))


set.seed(1)

split <- initial_split(data, prop = 0.29106, strata = category)
training <- 
  training(split) %>% 
  select(category, energy, track.name, track.artist) %>% 
  mutate(edm = case_when(
    category == "EDM" ~ 1,
    category == "Klassik" ~ 0
  ))



logistic_model <- logistic_reg() %>% 
  set_engine("glm") %>% 
  fit(factor(edm) ~ energy, data = training)

# Extract coefficients
coefs <- tidy(logistic_model)
optimal_beta_0 <- coefs$estimate[1]
optimal_beta_1 <- coefs$estimate[2]

# Define logistic function
logistic <- function(x, beta_0, beta_1){
  exp(beta_0 + beta_1*x) / (1 + exp(beta_0 + beta_1*x))
}

# Generate data for plot with optimal parameters
x <- seq(0, 1, by = 0.01)
y <- logistic(x, optimal_beta_0, optimal_beta_1)
plot_data <- data.frame(x = x, y = y)

# Define UI
ui <- fluidPage(
  titlePanel("Logistic Regression Plot"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("beta_0", "Beta 0", max = optimal_beta_0 * 0.90, min = optimal_beta_0 * 1.1, value = optimal_beta_0, step = 0.01 ),
      sliderInput("beta_1", "Beta 1", min = optimal_beta_1 * 0.8, max = optimal_beta_1 * 1.2, value = optimal_beta_1)
    ),
    mainPanel(
      plotOutput("logisticPlot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  
  # Reactive expression to update plot based on user inputs
  plot_data <- reactive({
    x <- seq(0, 1, by = 0.01)
    y <- logistic(x, input$beta_0, input$beta_1)
    data.frame(x = x, y = y)
  })
  
  # Render the logistic function plot
  output$logisticPlot <- renderPlot({
    ggplot(plot_data(), aes(x = x, y = y)) +
      geom_line(size = 1) +
      labs(x = "X", y = "p(X)") +
      theme_bw()
  })
}

# Run the app
shinyApp(ui = ui, server = server)